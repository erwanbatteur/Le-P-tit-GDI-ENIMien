
#__________________________________________________#
__author__ = "Erwan LABADIE"
__copyright__ = "Copyright 04/2022"
__maintainer__ = "Erwan LABADIE"
#__________________________________________________#

"""
Program description :
This sub-program is used to print the result of data about circlips (french word) to the user on the main program.
"""

### CIRCLIPS data ###
### ALESAGE ###
CirAlDia = [8, 9, 10, 12, 15, 17, 20, 22, 25, 28, 30, 32, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110]
Cir_E = [0.8, 0.8, 1, 1, 1, 1, 1, 1, 1.2, 1.2, 1.2, 1.2, 1.5, 1.75, 1.75, 2, 2, 2, 2.5, 2.5, 2.5, 2.5, 3, 3, 3, 3, 4, 4]
Cir_C = [3.2, 4, 3.7, 4.7, 7, 8.4, 10.6, 13.6, 15, 18.4, 19.4, 20.2, 23.2, 27.4, 31.6, 36, 40.4, 44.4, 48.8, 53.4, 58.4, 62, 66.8, 71.8, 76.4, 81, 86, 88.2]
Cir_F = [0.9, 0.9, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.3, 1.3, 1.3, 1.3, 1.6, 1.85, 1.85, 2.15, 2.15, 2.15, 2.65, 2.65, 2.65, 2.65, 3.15, 3.15, 3.15, 3.15, 4.15, 4.15]
Cir_G = [8.4, 9.4, 10.4, 12.5, 15.7, 17.8, 21, 23, 26.2, 29.4, 31.4, 33.7, 37, 42.5, 47.5, 53, 58, 63, 68, 73, 78, 83.5, 88.5, 93.5, 98.5, 103.5, 109, 114]
Cir_G_adj = [0.09, 0.09, 0.11, 0.11, 0.11, 0.11, 0.13, 0.21, 0.21, 0.21, 0.25, 0.25, 0.25, 0.25, 0.25, 0.30, 0.30, 0.30, 0.30, 0.30, 0.30, 0.35, 0.35, 0.35, 0.35, 0.35, 0.54, 0.54]
Cir_K = [0.6, 0.6, 0.6, 0.75, 1.05, 1.2, 1.5, 1.5, 1.8, 2.1, 2.1, 2.55, 3, 3.75, 3.75, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 5.25, 5.25, 5.25, 5.25, 5.25, 6, 6]

### ARBRE ###
CirArDia = [3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 17, 20, 22, 25, 28, 30, 32, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90]
Cir_e = [0.4, 0.4, 0.6, 0.7, 0.8, 0.8, 1, 1, 1, 1, 1, 1, 1.2, 1.2, 1.2, 1.5, 1.5, 1.5, 1.5, 1.75, 1.75, 2, 2, 2, 2.5, 2.5, 2.5, 2.5, 3, 3]
Cir_c = [6.8, 8.4, 10.7, 12.2, 13.2, 15.2, 15.4, 17.6, 19.6, 22, 23.2, 25.6, 29, 31.4, 34.8, 38.4, 41, 43.4, 47.2, 53, 59.4, 64.8, 70.4, 75.8, 81.6, 87.2, 92.8, 98.2, 104, 109]
Cir_f = [0.5, 0.5, 0.7, 0.8, 0.9, 0.9, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.3, 1.3, 1.3, 1.6, 1.6, 1.6, 1.6, 1.85, 1.85, 2.15, 2.15, 2.15, 2.65, 2.65, 2.65, 2.65, 3.15, 3.15]
Cir_g = [2.8, 3.8, 4.8, 5.7, 6.7, 7.6, 8.6, 9.6, 11.5, 13.4, 14.3, 16.2, 19, 21, 23.9, 26.6, 28.6, 30.3, 33, 37.5, 42.5, 47, 52, 57, 62, 67, 72, 76.5, 81.5, 86.5]
Cir_g_adj = [-0.04, -0.048, -0.048, -0.058, -0.058, -0.058, -0.058, -0.058, -0.11, -0.11, -0.11, -0.11, -0.13, -0.21, -0.21, -0.21, -0.21, -0.25, -0.25, -0.25, -0.25, -0.25, -0.30, -0.30, -0.30, -0.30, -0.30, -0.30, -0.35, -0.35]
Cir_k = [0.3, 0.3, 0.3, 0.45, 0.45, 0.6, 0.6, 0.6, 0.75, 0.9, 1.05, 1.2, 1.5, 1.5, 1.65, 2.1, 2.1, 2.55, 3, 3.75, 3.75, 4.5, 4.5, 4.5, 4.5, 4.5, 4.5, 5.25, 5.25, 5.25]


def Circlips_data(dia):
    ### ALESAGE ###
    if dia > CirAlDia[27]:
        dia_Al = val_E = val_C = val_F = val_G = val_G_adj = val_K = "no"
    else:
        i = 0
        while CirAlDia[i] < dia:
            i = i + 1
        #print(j)
        dia_Al = CirAlDia[i]
        val_E = Cir_E[i]
        val_C = Cir_C[i]
        val_F = Cir_F[i]
        val_G = Cir_G[i]
        val_G_adj = Cir_G_adj[i]
        val_K = Cir_K[i]
    
    ### ARBRE ###
    if dia > CirArDia[29]:
        dia_Ar = val_e = val_c = val_f = val_g = val_g_adj = val_k = "no"
    else:
        j = 0
        while CirArDia[j] < dia:
            j = j + 1
        #print(j)
        dia_Ar = CirArDia[j]
        val_e = Cir_e[j]
        val_c = Cir_c[j]
        val_f = Cir_f[j]
        val_g = Cir_g[j]
        val_g_adj = Cir_g_adj[j]
        val_k = Cir_k[j]
    

    return dia_Al, val_E, val_C, val_F, val_G, val_G_adj, val_K, dia_Ar, val_e, val_c, val_f, val_g, val_g_adj, val_k


# print(len(CirAlDia))

# print(Circlips_data(95))
